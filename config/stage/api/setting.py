"""
Django settings for aries project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

# settings/local.py
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(__file__))

BASE_DIR = os.path.dirname('/home/nexttf/workspace/project_aries/base/')
LOG_DIR = os.path.dirname('/home/nexttf/workspace/project_aries/base/logs/')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't9akg1cfc(u%fo)!a95oizo)(&#ju8qqv1x&@4q-6)cynci#m2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
STAGE = True

LOG_PREFIX = 'stg_api'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']

# WSGI and ROOT URL CONF
ROOT_URLCONF = 'config.stage.api.urls'

# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_xml',
    'corsheaders',
    'channels',
    'aries',
    'aries.common',
    'aries.products',
    'aries.delivery',
    'aries.operation',
    'aries.payments',
    'aries.purchases',
    'aries.platform',
    'aries.shepherd',
    'aries.users',
    'aries.cdn',
    'aries.ucc',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.stage.api.wsgi.application'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s'
        },
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console_info': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, LOG_PREFIX + '_info.log'),
            'when': 'D',
            'interval': 1,
            'backupCount': 14,
            'formatter': 'verbose',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, LOG_PREFIX + '_error.log'),
            'when': 'D',
            'interval': 1,
            'backupCount': 14,
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'products_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'products_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'delivery_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'delivery_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'purchases_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'purchases_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'payments_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'payments_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'platform_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'platform_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'users_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'users_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'ucc_info': {
            'handlers': ['console_info', 'file_info'],
            'level': 'INFO',
            'propagate': True,
        },
        'ucc_error': {
            'handlers': ['console_error', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        },
        'NAME': 'aries_rel_en',
        'USER': 'viastelle',
        'PASSWORD': 'viastelle',
        'HOST': 'rm-viastelle.mysql.rds.aliyuncs.com',
        'PORT': '3306',
    },
    'aries_cn': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        },
        'NAME': 'aries_rel_cn',
        'USER': 'viastelle',
        'PASSWORD': 'viastelle',
        'HOST': 'rm-viastelle.mysql.rds.aliyuncs.com',
        'PORT': '3306',
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/home/nexttf/workspace/project_aries/base',
        'TIMEOUT': 120,
    },
    'redis': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://r-viastelle.redis.rds.aliyuncs.com/1',
        'PORT': '6379',
        'TIMEOUT': 600,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': 'viastelle',
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
        }
    }
}

# Channel layer - redis
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'asgi_redis.RedisChannelLayer',
        'CONFIG': {
            'hosts': ['localhost, 6379']
        },
        'ROUTING': 'aries.operation.routing.channel_routing'
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CONTENT_TYPES = ['image', 'video']
# 2.5MB - 2621440
# 5MB - 5242880
# 10MB - 10485760
# 20MB - 20971520
# 50MB - 5242880
# 100MB 104857600
# 250MB - 214958080
# 500MB - 429916160
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/


CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS'
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'open-id',
    'hub-id',
    'os-type'
)

REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework_xml.parsers.XMLParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
        'aries.common.parser.text_xml_parser.TextXmlParser',
    ),
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR + STATIC_URL, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR + MEDIA_URL, 'cdn')
